/*
 * This file is part of the bass library.
 *
 * (c) Anthony Matarazzo <email@anthonymatarazzo.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

var Query = require('./query');

/**
 * The Query Result object is returned from queries generated by
 * a Query object, to keep track of pagination and other data.
 *
 * @Rest:Object
 * @Rest:SerializeMethod(method="toJSON")
 *
 * @param {Query} query
 * @param {Array} data
 * @throws Error
 * @constructor
 */
function QueryResult(query, data)
{
	if (typeof query !== 'object' ||
		query.constructor.name !== 'Query')
	{
		throw new Error('You must provide a valid Query object');
	}
	else if (data && !Array.isArray(data))
	{
		throw new Error('Data must be an array');
	}
	else
	{
		this.data = data || [];
		this._index = 0;

		this._query = query;
		this.offset = parseInt(query.getSkip() || 0);
		this.numResults = this.data.length;
		this.totalRows = this.numResults;
	}
}

QueryResult.prototype = {
	/**
	 * The underlying Query object
	 *
	 * @param {Query}
	 */
	_query : null ,

	/**
	 * The internal data pointer
	 *
	 * @var {Number}
	 */
	_index : null ,

	/**
	 * The raw response data
	 *
	 * @var {Object|*}
	 */
	rawData: null ,

	/**
	 * The offset the query results start at
	 * as it relates to the total count
	 *
	 * @var {Number}
	 */
	offset: null ,

	/**
	 * The number of results returned by this object
	 *
	 * @var {Number}
	 */
	numResults: null ,

	/**
	 * The total number of rows that can be returned
	 * from the underlying Query
	 *
	 * @var {Number}
	 */
	totalRows: null ,

	/**
	 * The data returned from the query
	 *
	 * @var {Array}
	 */
	data : null ,

	/**
	 * Set the data for this query result
	 * @param {Array|null} data
	 * @throws Error
	 * @returns {void}
	 */
	setData: function(data)
	{
		if (data && !Array.isArray(data))
		{
			throw new Error('Data must be an Array');
		}
		else
		{
			this.data = data;
			if (data)
			{
				this.numResults = data.length;
				if (this.totalRows === null)
				{
					this.totalRows = this.numResults;
				}
			}
			else
			{
				this.numResults = 0;
			}
			this.rewind();
		}
	} ,

	/**
	 * See if we have any data
	 * @returns {Boolean}
	 */
	hasData: function() {
		return (this.data && this.data.length > 0);
	} ,

	/**
	 * Get the data result at the current index position
	 *
	 * @returns {*}
	 */
	current : function()
	{
		if (typeof this.data[this._index] !== 'undefined')
		{
			return this.data[this._index];
		}
		return null;
	} ,

	/**
	 * Get the current index position
	 *
	 * @returns {Number|null}
	 */
	key : function()
	{
		return this._index;
	} ,

	/**
	 * Increment the internal pointer and return
	 * the next data result or null
	 *
	 * @returns {*|null}
	 */
	next : function()
	{
		var i = this._index + 1;
		if (typeof this.data[i] !== 'undefined')
		{
			this._index = i;
			return this.data[this._index];
		}
		return null;
	} ,

	/**
	 * Rewind the internal pointer
	 *
	 * @returns {void}
	 */
	rewind : function()
	{
		this._index = 0;
	} ,

	/**
	 * See if an index exists in the data array
	 *
	 * @param {Number} key
	 * @returns {boolean}
	 */
	exists : function(key)
	{
		return (typeof this.data[key] !== 'undefined');
	} ,

	/**
	 * Get the underlying Query object
	 *
	 * @returns {Query}
	 */
	getQuery : function()
	{
		return this._query;
	} ,

	/**
	 * {@inheritdoc}
	 */
	toJSON: function() {
		return {
			'data': this.data || [] ,
			'offset': this.offset ,
			'limit': this._query.getLimit() ,
			'numResults': this.numResults ,
			'totalRows': this.totalRows
		};
	}
};

QueryResult.prototype.constructor = QueryResult;

module.exports = QueryResult;